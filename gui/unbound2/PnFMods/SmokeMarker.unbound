(def constant TT_SMOKEMARKER_INSTALLED true) #for modconfig
(def constant SM_COLOR_PREF_NAME {
	MINIMAP: {
		ALPHA:	'smokeMarkerMinimapOpacity',
		RED:	'smokeMarkerMinimapRed',
		GREEN:	'smokeMarkerMinimapGreen',
		BLUE:	'smokeMarkerMinimapBlue',
	},
	WORLD: {
		ALPHA:	'smokeMarkerWorldOpacity',
		RED:	'smokeMarkerWorldRed',
		GREEN:	'smokeMarkerWorldGreen',
		BLUE:	'smokeMarkerWorldBlue',
	},
})
(def constant SM_COLOR_DEFAULT {
	MINIMAP: {
		ALPHA: 0.4,
		RED: 0.8,
		GREEN: 0.8,
		BLUE: 0.8,
	},
	WORLD: {
		ALPHA: 1.0,
		RED: 1.0,
		GREEN: 1.0,
		BLUE: 1.0,
	},
})

(def macro SM_GET_PREF_NUMBER (_varName:expression, _prefKey:expression, _default:expression="0.8")
	(var name="_varName" type=number value="(userPrefsNum && toString(userPrefsNum[_prefKey]) != null) ? (round(userPrefsNum[_prefKey]) * 0.1) : _default")
)

######################################################
#### WORLD MARKERS ###################################
######################################################
(def element WorldSmokeMarkersContainer() layout=true
	(scope
		(var parameterCol:gfx = "$datahub.getCollection(CC.parameter)")
		(var smokeMarkersContainerEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.parameter, 0, 'modSmokeMarkerEntityList')" (event "parameterCol.evAdded") (event "parameterCol.evRemoved"))
		(var dataComponent:gfx = "smokeMarkersContainerEntity ? smokeMarkersContainerEntity.data : null")
		(var smokeMarkerEntityIds:array = "dataComponent ? dataComponent.data.ids : []" (event "dataComponent.evChanged"))
		(var entityIdsCount:number = "smokeMarkerEntityIds ? smokeMarkerEntityIds.length : 0")

		#Userprefs
		(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
		(var userPrefsNum:dict = "userPrefsComponent.userPrefs.chatBoxWidth" watch=false (event "userPrefsComponent.evUserPrefsChanged"))

		(macro SM_GET_PREF_NUMBER _varName="'alphaScale'" _prefKey="SM_COLOR_PREF_NAME.WORLD.ALPHA" _default="SM_COLOR_DEFAULT.WORLD.ALPHA")
		(macro SM_GET_PREF_NUMBER _varName="'redScale'" _prefKey="SM_COLOR_PREF_NAME.WORLD.RED" _default="SM_COLOR_DEFAULT.WORLD.RED")
		(macro SM_GET_PREF_NUMBER _varName="'greenScale'" _prefKey="SM_COLOR_PREF_NAME.WORLD.GREEN" _default="SM_COLOR_DEFAULT.WORLD.GREEN")
		(macro SM_GET_PREF_NUMBER _varName="'blueScale'" _prefKey="SM_COLOR_PREF_NAME.WORLD.BLUE" _default="SM_COLOR_DEFAULT.WORLD.BLUE")

		(var colorTransform:dict = "{ redMultiplier: redScale, greenMultiplier: greenScale, blueMultiplier: blueScale, alphaMultiplier: alphaScale}")
	)

	(controller $Repeat renderer='WorldSmokeMarker'
		(bind enabled "entityIdsCount > 0")
		(bind count "entityIdsCount")
		(args
			_entityId="smokeMarkerEntityIds[$index]"
			_colorTransform="colorTransform"
		)
	)
)


(def element WorldSmokeMarker (_entityId:number, _colorTransform:dict="{}") layout=true
	(scope
		#Smoke Timers Entity
		(var _markerEntity:gfx = "$datahub.getEntity(_entityId)")

		(macro GET_MARKER_ENTITY_COMPONENT 'data')
		(macro GET_MARKER_ENTITY_COMPONENT 'screenPosition')
		(macro GET_MARKER_ENTITY_COMPONENT 'worldMarker')
		(macro GET_MARKER_ENTITY_COMPONENT 'distance')
		(macro GET_MARKER_ENTITY_COMPONENT '')


		(var createdTime:number = "dataComponent ? dataComponent.data.spawnTime : -1")
		#Visibility
		(var camera:gfx = "$datahub.getSingleComponent(CC.camera)")
		(var altVision:bool = "camera.altVision" (event "camera.evAltVisionChanged"))
		(var isBinocular:bool = "camera.isBinocular" (event "camera.evIsBinocularChanged"))

		(var distanceIndex:number = "distanceComponent ? distanceComponent.distanceIndex : -1" (event "distanceComponent.evDistanceIndexChanged"))
		(var closeToCamera:bool = "distanceIndex == DistanceType.NEAR")
		(var isTimerVisible:bool = "altVision || closeToCamera")
		(var isDistanceVisible:bool = "altVision")
		(var markerAlpha:number = "isBinocular ? 0.7 : 1.0")

		#Timers
		(var isTimerEnabled:bool = "createdTime > 0")
		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")
		(var timeElapsed:number = "timer.currentTime - createdTime" (event "timer.evInfrequent"))
		(var timeElapsedText:str = "isTimerEnabled && isTimerVisible ? '+' + round(timeElapsed) : ' '")

		#Screen Pos
		(var posX:number = "screenPositionComponent ? screenPositionComponent.position.x : 0" (event "evEnterFrame"))
		(var posY:number = "screenPositionComponent ? screenPositionComponent.position.y : 0" (event "evEnterFrame"))
		(var posZ:number = "worldMarkerComponent ? worldMarkerComponent.zindex : 0" (event "worldMarkerComponent.evZindexChanged"))
	)

	(style
		(bind left "posX")
		(bind top "posY")
		(bind zindex "posZ")
		(position = "absolute")
		(align = "center|bottom")
		(bind alpha "markerAlpha")
	)

	(block
		(style
			(align = "center|middle")
			(width = 0) (height = 0)
		)
		
		(element SmokeDistanceItem "_entityId" "isDistanceVisible")
		(block
			(style
				(bind backgroundImage "'url:../quick_commands/qc_icon_smoke.png'")
				(width = 51) (height = 51)
				(scaleX = 0.4) (scaleY = 0.4)
			)
			(bind colorTransform "_colorTransform")
		)
		(element SimpleMarkerTextItem "timeElapsedText")
	)
)

(def element SmokeDistanceItem (_entityId:number, _visibility:bool) layout=true
	(scope
		(var _markerEntity:gfx = "$datahub.getEntity(_entityId)")

		(var timer:gfx = "$datahub.getSingleComponent(CC.timer)")

		(macro GET_MARKER_ENTITY_COMPONENT 'distance')
		(var distanceToShip:number = "distanceComponent ? distanceComponent.distanceToShip : 0" (event "timer.evInfrequent"))
		(var distanceText:str = "_visibility ? formatFloatingPoint(round(distanceToShip * 10) / 10, 1) + ' ' + tr('IDS_KILOMETER'): ' '")
	)
	(element SimpleMarkerTextItem "distanceText")
)

######################################################
#### MINIMAP MARKERS #################################
######################################################
(def element MinimapMarkersContainer (_mapScale:number, _itemScale:number, _scaleRatio:number, _markerSettingsMap:array, _isLoading:bool = false) layout=true
	(scope
		(var markersCollection:gfx = "$datahub.getCollection(CC.minimapMarker)")
		(var availableMarkers:gfx = "markersCollection.getChildByPath('available')")
	)

	(class $FullsizeAbsolute)

	#mod
	(element MapSmokeMarkersContainer "_mapScale" "_itemScale" "_scaleRatio")
	#mod

	(controller $Repeat renderer='MapMarkerItem'
		(bind count "availableMarkers.items.length" watch=false (event "availableMarkers.evAdded"))
		(bindcall removeChildAt "$event[1]" (event "availableMarkers.evRemoved"))
		(args "availableMarkers" "_mapScale" "_itemScale" "_scaleRatio" "_markerSettingsMap" "_isLoading")
	)
)

(def element MapSmokeMarkersContainer (_mapScale:number, _itemScale:number, _scaleRatio:number) layout=true
	(scope
		(var parameterCol:gfx = "$datahub.getCollection(CC.parameter)")
		(var smokeMarkersContainerEntity:gfx = "$datahub.getPrimaryCompositeEntity(CC.parameter, 0, 'modSmokeMarkerEntityList')" (event "parameterCol.evAdded") (event "parameterCol.evRemoved"))
		(var dataComponent:gfx = "smokeMarkersContainerEntity ? smokeMarkersContainerEntity.data : null")
		(var smokeMarkerEntityIds:array = "dataComponent ? dataComponent.data.ids : []" (event "dataComponent.evChanged"))
		(var entityIdsCount:number = "smokeMarkerEntityIds ? smokeMarkerEntityIds.length : 0")

		#UserPrefs
		(var userPrefsComponent:gfx = "$datahub.getSingleComponent(CC.userPrefs)")
		(var userPrefsNum:dict = "userPrefsComponent.userPrefs.chatBoxWidth" watch=false (event "userPrefsComponent.evUserPrefsChanged"))
		
		(macro SM_GET_PREF_NUMBER _varName="'alphaScale'" _prefKey="SM_COLOR_PREF_NAME.MINIMAP.ALPHA" _default="SM_COLOR_DEFAULT.MINIMAP.ALPHA")
		(macro SM_GET_PREF_NUMBER _varName="'redScale'" _prefKey="SM_COLOR_PREF_NAME.MINIMAP.RED" _default="SM_COLOR_DEFAULT.MINIMAP.RED")
		(macro SM_GET_PREF_NUMBER _varName="'greenScale'" _prefKey="SM_COLOR_PREF_NAME.MINIMAP.GREEN" _default="SM_COLOR_DEFAULT.MINIMAP.GREEN")
		(macro SM_GET_PREF_NUMBER _varName="'blueScale'" _prefKey="SM_COLOR_PREF_NAME.MINIMAP.BLUE" _default="SM_COLOR_DEFAULT.MINIMAP.BLUE")
	)

	(block
		(controller $Repeat renderer='MapSmokeMarker'
			(bind enabled "entityIdsCount > 0")
			(bind count "entityIdsCount")
			(args
				_entityId="smokeMarkerEntityIds[$index]"
				_mapScale="_mapScale"
				_itemScale="_itemScale"
				_scaleRatio="_scaleRatio"
			)
		)
		(bind colorTransform "{ redMultiplier: redScale, greenMultiplier: greenScale, blueMultiplier: blueScale, alphaMultiplier: alphaScale}")
		(blendMode = 'layer')
	)
)

(def element MapSmokeMarker (_entityId:number, _mapScale:number, _itemScale:number, _scaleRatio:number) layout=true
	(scope
		(event evShow)
		#Smoke Timers Entity
		(var smokeMarkerEntity:gfx = "$datahub.getEntity(_entityId)")
		(var mapPosition:gfx = "smokeMarkerEntity.mapPosition")
		#Marker Scale
		(var markerScale:number = "_itemScale / _mapScale")
		(var radius:number = "smokeMarkerEntity.data.data.radius * _scaleRatio")
		#Map Pos
		(var posX:number = "mapPosition ? _scaleRatio * mapPosition.position.x : 0")# (event "evEnterFrame"))
		(var posY:number = "mapPosition ? _scaleRatio * mapPosition.position.y : 0")# (event "evEnterFrame"))
	)

	(dispatch evShow on=addedToStage)

	(macro BIND_FAIR_SCALE "markerScale")

	(style
		(bind left "posX")
		(bind top "posY")
		(position = "absolute")
	)

	#For some really weird reason, a circle does not appear when there is only one instance within the parent repeat.
	#This animation somehow solves that issue, but not sure why it happens in the first place.
	#Disabling blendMode=layer solves the problem, so I assume this is a bug on the framework/AS3 side than this mod itself.
	(controller $Animation		
		(bindcall  play
			duration=0.01
			from={alpha: 0}
			to={alpha: 1}
			easing="Easing.quint_in"
			(event "evShow")
		)
	)

	(block
		(style
			(align = "center|middle")
			(width = 0) (height = 0)
		)
		
		(controller $Sector
			(arc = 360)
			(bind radius "radius")
			(bind color "0xFFFFFF")
		)
	)
)